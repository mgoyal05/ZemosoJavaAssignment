1. java.util.Arrays#asList()                                                                
      This function returns a 'list' view of the specified array given as argument.
      
      Example showing the usage of the method
         // create an array of strings
         String array[] = new String[]{"abc","klm","xyz","pqr"};
         List list1 = Arrays.asList(array);
         
     Array and List are two incompatible interfaces but Array want to implement List interface which is done here by using 
     'Adapter Pattern'
     The Adapter Pattern converts the interface of a class(Array) into another interface(List) the clients expect. 'asList'
     method creates a private static class ArrayList which implements all the methods required for Adaptee to function like 
     a 'List' like size(), toArray(), etc. They both have a common shared interface List/Abstract List.
  
2.  java.util.Collections#list()
    public static <T> ArrayList<T> list(Enumeration<T> e)
      This function Returns an array list containing the elements of the given Enumeration.
         
      Example showing the usage of the method
        Enumeration e = v.elements();
        // get the list
        ArrayList arrlist = Collections.list(e);        //Returns an ArrayList containing all elements of enumeration
      
      This method act as an interface between two incompatible interfaces Enumeration and ArrayList which is done here by
      using 'Adapter Pattern'.
      Here Adaptee(Enumeration) sends the request to list(Adapter) method to implement the target Interface(ArrayList). 
      'list' method creates a local ArrayList and add all elements to it so now it act exactly like a ArrayList.
 
3.  java.util.Collections#enumeration()
    public static <T> Enumeration<T> enumeration(final Collection<T> c)
      This function does the opposite of the previous method i.e. It returns an enumeration of the given collection
      
      Example showing the usage of the method
      List arrlist = new ArrayList();
      // create Enumeration
      Enumeration e = Collections.enumeration(arrlist);
      
      This method also uses 'Adapter Pattern' and act as an interface between Enumeration and ArrayList.
      It implements all the methods of target interface(Enumeration) so that the user can use it to access
      Adaptee(ArrayList) as target(Enumeration) interface.
      
4.  java.io.InputStreamReader(InputStream) (returns a Reader)
    public InputStreamReader(InputStream in)
      This function creates a InputStreamReader which uses Default charset
      
      Example showing the usage of the method
        InputStreamReader in_strm = new InputStreamReader(geek);
        int temp;
           while ((temp = sourceStream.read()) != -1)
              System.out.println((char)temp);
            
      Method
        public InputStreamReader(InputStream in) {
        super(in);
        try {
            sd = StreamDecoder.forInputStreamReader(in, this, (String)null); // ## check lock object
        } catch (UnsupportedEncodingException e) {
            // The default encoding should always be available
            throw new Error(e);
        }
      }
    
      This method act as an interface between StreamDecoder and Reader, hence uses 'Adapter Pattern'.
      Here InputStreamReader act as an Adapter and it implement three methods(read, ready and close) common to both of 
      them. Adapter translates the request into Adaptee(StreamDecoder) calls so that client should get the result in Target
      interface(Reader) class format.

5.  java.io.OutputStreamWriter(OutputStream) (returns a Writer)
      This function creates a OutputStreamReader which uses Default charset.
      
      Method
        public OutputStreamWriter(OutputStream out) {
        super(out);
        try {
            se = StreamEncoder.forOutputStreamWriter(out, this, (String)null);
        } catch (UnsupportedEncodingException e) {
            throw new Error(e);
        }
      }
      
      Example showing the usage of the method
        OutputStream output = new FileOutputStream ("data/data.bin");
        OutputStreamWriter outputStreamWriter = new OutputStreamWriter(output);
        This method act as an interface between StreamEncoder and Writer, hence uses 'Adapter Pattern'.
        
      This method also uses 'Adapter Pattern' and act as an interface between StreamEncoder and Writer.
      Here OutputStreamWriter act as an Adapter and it implements method(flush, close, write, etc) common to both of them.
      Adapter translates the request into Adaptee(StreamEncoder) calls so that client should get the result in Target
      interface(Writer) class format.
      
6.  javax.xml.bind.annotation.adapters.XmlAdapter#marshal() and #unmarshal()
      public abstract BoundType unmarshal(ValueType v) throws Exception;
      
      This function takes argument of type 'ValueType' and converts into 'BoundType' and vice versa for marshal.
      
      Example showing the usage of method
        public byte[] unmarshal(String s) {
         if(s==null)     return null;
         return DatatypeConverter.parseHexBinary(s);
        }
        
      This method also uses 'Adapter Pattern' and act as an interface between ValueType and BoundType.
      Here unmarshal and marshal act as an Adapter(Abstract method) for Class 'ValueType' and 'BoundType'. So the class
      which uses this method defines in such a way that the input argument is changed from ValueType to BoundType and vice
      versa. For marshal BoundType act as an Adaptee and target is ValueType.
